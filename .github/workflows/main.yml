name: ci

on:
  push:
    branches:
      - master
      - renovate/*
    tags:
      - v*
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies (with all extras)
      run: |
        python -m pip install --upgrade poetry
        poetry install $(cat pyproject.toml | awk '/^\s*$/{f=0};f{if ($1!="docs") printf(" -E %s",$1)};/\[tool\.poetry\.extras\]/{f=1}')
    - run: poetry run pytest --cov=ampel
  
  mypy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies (with all extras)
      run: |
        python -m pip install --upgrade poetry
        poetry install $(cat pyproject.toml | awk '/^\s*$/{f=0};f{if ($1!="docs") printf(" -E %s",$1)};/\[tool\.poetry\.extras\]/{f=1}')
    - run: poetry run mypy --namespace-packages -p ampel

  pypi:
    runs-on: ubuntu-latest
    needs: [test, mypy]
    if: ${{ github.event_name == 'push' && ( contains(github.ref, '/tags/v') || contains(github.ref, 'refs/heads/master') ) }}

    steps:
    - name: Get commit range
      id: commits
      uses: actions/github-script@v3
      with:
        github-token: ${{ github.token }}
        script: return context.payload.commits.length+1
    - uses: actions/checkout@v2
      with:
        fetch-depth: ${{ steps.commits.outputs.result }}
    - uses: actions/checkout@v2
      with:
        fetch-depth: ${{ steps.commits.outputs.result }}
    # Check if the version was changed in the commit range that was just pushed
    - name: Check for version bump
      id: check
      run: |
        echo Checking last $((${{ steps.commits.outputs.result }}-1)) commits
        poetry_version() { awk '/^\s*$/{f=0};f{if ($1=="version") {gsub(/"/, "", $3); print($3)}};/\[tool\.poetry\]/{f=1}'; }
        echo "::set-output name=previous::$(git show HEAD~$((${{ steps.commits.outputs.result }}-1)):pyproject.toml | poetry_version)"
        echo "::set-output name=current::$(git show HEAD:pyproject.toml | poetry_version)"
    # If the version was bumped on a push to main (rather than a tag), create a tag
    - name: Create tag
      uses: actions/github-script@v3
      if: ${{ !contains(github.ref, '/tags/v') && (steps.check.outputs.current != steps.check.outputs.previous) }}
      with:
        github-token: ${{ github.token }}
        script: |
          github.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: "refs/tags/v${{steps.check.outputs.current}}",
            sha: context.sha
          })
    # For tag pushes, verify that the tag makes sense
    - id: tag
      uses: dawidd6/action-get-tag@v1.0.0
      if: ${{ success() && contains(github.ref, '/tags/v') }}
    - name: Verify tag matches version
      if: ${{ success() && contains(github.ref, '/tags/v') }}
      run: |
        [ v${{steps.check.outputs.current}} = "${{steps.tag.outputs.tag}}" ] || (echo "tag does not match version: "${{steps.tag.outputs.tag}}" != version v${{steps.check.outputs.current}}" && false)
    # Publish on tag push or version bump
    - uses: actions/setup-python@v2
      if: ${{ success() && (contains(github.ref, '/tags/v') || (steps.check.outputs.current != steps.check.outputs.previous)) }}
      with:
        python-version: 3.9
    - name: Install poetry
      if: ${{ success() && (contains(github.ref, '/tags/v') || (steps.check.outputs.current != steps.check.outputs.previous)) }}
      run: |
        python -m pip install --upgrade poetry
    - name: Publish
      if: ${{ success() && (contains(github.ref, '/tags/v') || (steps.check.outputs.current != steps.check.outputs.previous)) }}
      run: |
        poetry config repositories.testpypi https://test.pypi.org/legacy/
        poetry publish -n --build
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        POETRY_PYPI_TOKEN_TESTPYPI: ${{ secrets.PYPI_TEST_API_TOKEN }}
