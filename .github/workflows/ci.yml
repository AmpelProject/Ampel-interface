on:
  workflow_call:
    inputs:
      mongo:
        required: false
        description: start a mongo instance for tests
        type: boolean
        default: false
      lint:
        required: false
        description: lint with ruff
        type: boolean
        default: false
      format:
        required: false
        description: check formatting with ruff
        type: boolean
        default: false
      python-version:
        required: false
        type: string
        # renovate: datasource=conda depName=conda-forge/python
        default: "3.13.3"
      poetry-version:
        required: false
        type: string
        # renovate: datasource=pypi depName=poetry versioning=pep440
        default: "2.1.3"
      ruff-version:
        required: false
        type: string
        # renovate: datasource=pypi depName=ruff versioning=pep440
        default: "0.11.10"
      mypy-check-files:
        required: false
        description: extra files to check with mypy
        type: string
        default: ""
    secrets:
      PYPI_API_TOKEN:
        description: PyPI API token with permission to publish. Required for tags and pushes to main branch, but not for PRs.
        required: false

jobs:

  lint:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
    - name: ruff format
      id: format
      uses: chartboost/ruff-action@e18ae971ccee1b2d7bbef113930f00c670b78da4 # v1
      with:
        version: ${{ inputs.ruff-version }}
        args: format
      env:
        RUFF_FORMAT: github
      if: ${{ inputs.format }}
    - name: ruff check
      id: check
      uses: chartboost/ruff-action@e18ae971ccee1b2d7bbef113930f00c670b78da4 # v1
      with:
        version: ${{ inputs.ruff-version }}
        args: check . --fix
      env:
        RUFF_FORMAT: github
      if: always() && ${{ inputs.lint }}
    - name: check for changes
      uses: tj-actions/verify-changed-files@v20
      id: verify-changed-files
      if: always() && (steps.format.outcome != 'skipped' || steps.check.outcome != 'skipped')
      with:
        # Fail if files were changed (this indicates there are linting errors to fix)
        fail-if-changed: 'true'
    - name: suggest changes
      uses: parkerbxyz/suggest-changes@v3.0.0
      if: failure() && steps.verify-changed-files.outcome == 'failure' && github.event_name == 'pull_request'
      with:
        event: REQUEST_CHANGES
        message: |
          The following changes were automatically suggested by [ruff ${{ inputs.ruff-version }}](https://github.com/astral-sh/ruff).

  test:
    runs-on: ubuntu-24.04
    needs: [lint]
    services:
      mongo:
        # hobo conditional service; see https://github.com/actions/runner/issues/822#issuecomment-1831511432
        image: ${{ (inputs.mongo && 'mongo:7') || '' }}
        ports:
          - 27017:27017
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
    - name: "Set up environment"
      uses: packetcoders/action-setup-cache-python-poetry@0d0be5577b30d85f3fa2d93a4beeda149520f120 # v1.2.0
      with:
        python-version: ${{ inputs.python-version }}
        poetry-version: ${{ inputs.poetry-version }}
        install-args: --all-extras --compile --sync
    - name: Install root
      run: poetry run pip install -e . --no-deps
    - run: poetry run pytest
      env:
        MONGO_PORT: ${{ job.services.mongo.ports[27017] }}
  
  mypy:
    runs-on: ubuntu-24.04
    needs: [lint]
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
    - name: "Set up environment"
      uses: packetcoders/action-setup-cache-python-poetry@0d0be5577b30d85f3fa2d93a4beeda149520f120 # v1.2.0
      with:
        python-version: ${{ inputs.python-version }}
        poetry-version: ${{ inputs.poetry-version }}
        install-args: --all-extras --compile --sync
    - name: Install root
      run: poetry run pip install -e . --no-deps
    - run: poetry run mypy
    - if: ${{ inputs.mypy-check-files }}
      run: poetry run mypy ${{ inputs.mypy-check-files }}

  check_version:
    name: Tag version bump
    runs-on: ubuntu-24.04
    # run only on pushes, not PRs
    if: ${{ github.event_name == 'push' && github.base_ref == null }}
    needs: [test, mypy]
    outputs:
      should_publish: ${{ steps.check.outputs.should_publish }} 
    steps:
    - uses: jvansanten/action-tag-poetry-version-bump@45f78f40d22ca43a496a71af75480a435b3dac31 # v1
      id: check

  pypi:
    name: Publish to PyPI
    runs-on: ubuntu-24.04
    needs: [check_version]
    # NB: outputs are always strings; explicitly parse to get a boolean
    if: ${{ fromJSON(needs.check_version.outputs.should_publish) }}
    
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
    # bits borrowed from packetcoders/action-setup-cache-python-poetry, in order
    # to reuse the poetry cache without actually restoring the venv
    - name: Set up python ${{ inputs.python-version }}
      id: setup-python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
      with:
        python-version: ${{ inputs.python-version }}
    - name: Load cached Poetry Binary
      id: cached-poetry-binary
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: ~/.local
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ inputs.poetry-version }}
    - name: Install Poetry
      uses: snok/install-poetry@76e04a911780d5b312d89783f7b1cd627778900a # v1
      with:
        version: ${{ inputs.poetry-version }}
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Publish
      run: |
        poetry publish -n --build
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
